# bot/utils/keyboards.py
from bot.models.channels import Channel
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.models.broadcast_task import BroadcastTask



def get_subscription_keyboard(channels: list[Channel]) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=ch.title, url=ch.url)]
        for ch in channels
    ]
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)





def broadcast_main_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_constructor")],
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_active")],
            [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_history")],
        ]
    )


def broadcast_constructor_kb(task: BroadcastTask, is_editing: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not is_editing:
        buttons.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media")],
            [InlineKeyboardButton(text="üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="edit_buttons")],
            [
                InlineKeyboardButton(text="üì∑ –¢–µ–∫—Å—Ç+–§–æ—Ç–æ", callback_data="set_type_photo"),
                InlineKeyboardButton(text="üé• –¢–µ–∫—Å—Ç+–í–∏–¥–µ–æ", callback_data="set_type_video")
            ],
            [
                InlineKeyboardButton(text="üìπ –ö—Ä—É–∂–æ–∫", callback_data="set_type_video_note"),
                InlineKeyboardButton(text="üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="set_type_text")
            ]
        ])
    else:
        # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        buttons.append([InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_editing")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_editing")])

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.extend([
        [InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview_broadcast")],
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="save_draft")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_main")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def buttons_management_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_button")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="edit_buttons_list")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏", callback_data="clear_buttons")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_constructor")]
        ]
    )


def button_type_kb():
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó URL-–∫–Ω–æ–ø–∫–∞", callback_data="button_type_url")],
            [InlineKeyboardButton(text="‚ö° Web App", callback_data="button_type_webapp")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_buttons_management")]
        ]
    )


def broadcast_active_kb(tasks: list[BroadcastTask]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    buttons = []
    for task in tasks:
        status_icon = "üü¢" if task.status == "sending" else "üü°" if task.status == "pending" else "üî¥"
        buttons.append([
            InlineKeyboardButton(
                text=f"{status_icon} –†–∞—Å—Å—ã–ª–∫–∞ #{task.id} ({task.sent}/{task.total})",
                callback_data=f"broadcast_info_{task.id}"
            )
        ])

    buttons.append([InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="stop_all_broadcasts")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_main")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def broadcast_control_kb(task_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_broadcast_{task_id}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_broadcast_{task_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="broadcast_active")]
        ]
    )