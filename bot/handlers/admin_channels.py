from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from bot.services.manage_channels import ChannelService
from bot.config import settings

router = Router()




@router.message(F.text.startswith("/add_channel"))
async def add_channel(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    try:
        parts = message.text.split(maxsplit=2)  # —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∏–º –Ω–∞ 3 —á–∞—Å—Ç–∏
        if len(parts) < 3:
            raise ValueError

        _, tg_id, rest = parts
        tg_id = int(tg_id)

        # —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∏–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –Ω–∞ title –∏ url
        *title_parts, url = rest.rsplit(maxsplit=1)
        title = " ".join(title_parts).strip()

        if not title or not url:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/add_channel &lt;–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞&qt; &lt;–ù–∞–∑–≤–∞–Ω–∏–µ&qt; &lt;—Å—Å—ã–ª–∫–∞&qt;</code>", parse_mode="HTML"
        )
        return

    channel = await ChannelService.add_channel(session, tg_id, title, url)
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> –¥–æ–±–∞–≤–ª–µ–Ω.")









@router.message(F.text.startswith("/delete_channel"))
async def delete_channel(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    try:
        _, tg_id = message.text.split(maxsplit=1)
        tg_id = int(tg_id)
    except ValueError:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/delete_channel &lt;–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞&qt;</code>", parse_mode="HTML"
        )
        return

    deleted = await ChannelService.delete_channel(session, tg_id)
    if deleted:
        await message.answer(f"üóë –ö–∞–Ω–∞–ª <code>{tg_id}</code> —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("‚ö† –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(F.text.startswith("/channels"))
async def list_channels(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    channels = await ChannelService.get_channels(session)
    if not channels:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return

    lines = ["üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>:\n"]
    for ch in channels:
        lines.append(
            f"‚ñ´Ô∏è <b>{ch.title}</b>\n"
            f"   üÜî <code>{ch.tg_id}</code>\n"
            f"   üîó <a href=\"{ch.url}\">{ch.url}</a>\n"
        )

    text = "\n".join(lines)
    await message.answer(text, disable_web_page_preview=True)
