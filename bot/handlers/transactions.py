from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import func, select, desc
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone, timedelta

from bot.config import settings
from bot.db import SessionLocal
from bot.models.user_transaction import UserTransaction

router = Router()

PAGE_SIZE = 8  # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
MSK = timezone(timedelta(hours=3))

# --- –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
async def get_transactions_page(session: AsyncSession, page: int):
    offset = (page - 1) * PAGE_SIZE

    stmt = (
        select(UserTransaction)
        .order_by(desc(UserTransaction.created_at))
        .offset(offset)
        .limit(PAGE_SIZE)
    )

    result = await session.execute(stmt)
    transactions = result.scalars().all()

    total_stmt = select(func.count(UserTransaction.id))
    total_result = await session.execute(total_stmt)
    total_count = total_result.scalar_one()

    return transactions, total_count


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def build_transactions_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []

    if current_page > 2:
        buttons.append(InlineKeyboardButton(text="‚è™ 1", callback_data=f"tx_page:1"))
    if current_page > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tx_page:{current_page - 1}"))

    buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page_tx"))

    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"tx_page:{current_page + 1}"))
    if current_page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text=f"{total_pages} ‚è©", callback_data=f"tx_page:{total_pages}"))

    keyboard = []

    if len(buttons) <= 3:
        keyboard.append(buttons)
    elif len(buttons) == 4:
        keyboard.append(buttons[:2])
        keyboard.append(buttons[2:])
    else:
        keyboard.append(buttons[:2])
        keyboard.append([buttons[2]])
        keyboard.append(buttons[3:])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
def format_transaction_line(index: int, tx: UserTransaction) -> str:
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    dt = tx.created_at
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    formatted_time = dt.astimezone(MSK).strftime("%d.%m.%Y %H:%M:%S MSK")

    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    type_label = "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if tx.type == "deposit" else "üì§ –°–ø–∏—Å–∞–Ω–∏–µ"
    currency_icon = "üéÅ Gift" if tx.currency == "gift" else "üíé TON"

    # –°—É–º–º–∞ (–¥–µ–ª–∏–º –Ω–∞ 2 –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤)
    amount_val = round(tx.amount / 100, 2)  # –µ—Å–ª–∏ amount —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ—Ç–Ω—è—Ö
    amount_str = f"{amount_val:.2f}"

    return (
        f"<b>#{index}</b> {type_label}\n"
        f"‚î£ üßæ <b>–¢–∏–ø:</b> {currency_icon}\n"
        f"‚î£ üë§ <b>User ID:</b> <code>{tx.user_id}</code>\n"
        f"‚î£ üí∏ <b>–°—É–º–º–∞:</b> {amount_str}\n"
        f"‚îó üïí <i>{formatted_time}</i>\n"
        f"‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ"
    )


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
def format_transactions_message(transactions: list[UserTransaction], page: int, total_pages: int, total_count: int) -> str:
    header = (
        f"üíº <b>–ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>\n\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page}/{total_pages}</b>\n"
        f"üßæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_count}</b>\n\n"
    )

    if not transactions:
        return header + "üì≠ <i>–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</i>"

    tx_lines = [
        format_transaction_line(i + 1 + (page - 1) * PAGE_SIZE, tx)
        for i, tx in enumerate(transactions)
    ]

    return header + "\n".join(tx_lines)


# --- –ö–æ–º–∞–Ω–¥–∞ /transactions ---
@router.message(F.text.startswith("/transactions"))
async def list_transactions(message: Message):
    if message.from_user.id not in settings.admins:
        return

    page = 1
    async with SessionLocal() as session:
        transactions, total_count = await get_transactions_page(session, page)

    total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)
    text = format_transactions_message(transactions, page, total_pages, total_count)
    kb = build_transactions_keyboard(page, total_pages)

    await message.answer(text, parse_mode="HTML", reply_markup=kb)


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
@router.callback_query(F.data.startswith("tx_page:"))
async def paginate_transactions(cb: CallbackQuery):
    try:
        page = int(cb.data.split(":")[1])
        async with SessionLocal() as session:
            transactions, total_count = await get_transactions_page(session, page)

        total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)

        if page < 1 or page > total_pages:
            await cb.answer("‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        text = format_transactions_message(transactions, page, total_pages, total_count)
        kb = build_transactions_keyboard(page, total_pages)

        await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await cb.answer()
    except Exception as e:
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ---
@router.callback_query(F.data == "current_page_tx")
async def handle_current_page(cb: CallbackQuery):
    await cb.answer("üìÑ –í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
