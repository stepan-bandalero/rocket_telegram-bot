# bot/handlers/broadcast.py (–Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π)
import asyncio

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from bot.db import SessionLocal
from bot.services.broadcast import BroadcastService
from bot.states.broadcast_states import BroadcastStates
from bot.utils.formatter import TelegramFormatter
from bot.utils.keyboards import (
    broadcast_main_kb,
    broadcast_constructor_kb,
    buttons_management_kb,
    button_type_kb,
    broadcast_active_kb,
    broadcast_control_kb
)

router = Router()


@router.callback_query(F.data == "broadcast_main")
async def broadcast_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    await callback.message.edit_text(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=broadcast_main_kb()
    )


@router.callback_query(F.data == "broadcast_constructor")
async def broadcast_constructor(callback: CallbackQuery, state: FSMContext):
    """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    if user_id not in BroadcastService.current_editing:
        draft = await BroadcastService.create_draft(user_id)
    else:
        draft = BroadcastService.current_editing[user_id]

    preview_text = await _generate_preview_text(draft)

    await callback.message.edit_text(
        f"üé® <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("edit_"))
async def edit_component(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]

    if callback.data == "edit_text":
        await state.set_state(BroadcastStates.editing_text)
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=broadcast_constructor_kb(draft, is_editing=True)
        )

    elif callback.data == "edit_media":
        await state.set_state(BroadcastStates.editing_media)
        await callback.message.edit_text(
            "üñºÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:",
            reply_markup=broadcast_constructor_kb(draft, is_editing=True)
        )

    elif callback.data == "edit_buttons":
        await callback.message.edit_text(
            "üîò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏</b>",
            reply_markup=buttons_management_kb()
        )

#
# @router.message(BroadcastStates.editing_text)
# async def process_text_edit(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
#     user_id = message.from_user.id
#     if user_id not in BroadcastService.current_editing:
#         return
#
#     draft = BroadcastService.current_editing[user_id]
#     draft.text = message.text
#
#     preview_text = await _generate_preview_text(draft)
#     await message.answer(
#         f"‚úÖ **–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n{preview_text}",
#         reply_markup=broadcast_constructor_kb(draft),
#         parse_mode="HTML"
#     )
#     await state.clear()
#
#
#
#
# @router.message(BroadcastStates.editing_media)
# async def process_media_edit(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞"""
#     user_id = message.from_user.id
#     if user_id not in BroadcastService.current_editing:
#         return
#
#     draft = BroadcastService.current_editing[user_id]
#
#     if message.photo:
#         draft.content_type = "photo"
#         draft.media = message.photo[-1].file_id
#     elif message.video:
#         draft.content_type = "video"
#         draft.media = message.video.file_id
#     elif message.video_note:
#         draft.content_type = "video_note"
#         draft.media = message.video_note.file_id
#
#     preview_text = await _generate_preview_text(draft)
#     await message.answer(
#         f"‚úÖ **–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n{preview_text}",
#         reply_markup=broadcast_constructor_kb(draft),
#         parse_mode="HTML"
#     )
#     await state.clear()


# bot/handlers/broadcast.py
@router.message(BroadcastStates.editing_text)
async def process_text_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ HTML"""
    user_id = message.from_user.id
    if user_id not in BroadcastService.current_editing:
        return

    draft = BroadcastService.current_editing[user_id]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ HTML
    html_text = TelegramFormatter.entities_to_html(
        message.text or "",
        message.entities or []
    )

    draft.text = html_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ HTML

    preview_text = await _generate_preview_text(draft)
    await message.answer(
        f"‚úÖ <b>–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )
    await state.clear()


@router.message(BroadcastStates.editing_media)
async def process_media_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤ HTML"""
    user_id = message.from_user.id
    if user_id not in BroadcastService.current_editing:
        return

    draft = BroadcastService.current_editing[user_id]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
    if message.caption:
        html_text = TelegramFormatter.entities_to_html(
            message.caption,
            message.caption_entities or []
        )
        draft.text = html_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ HTML
    elif not draft.text:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –µ—â–µ –Ω–µ—Ç
        draft.text = "üì¢ –í–∞—à —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–¥–µ—Å—å..."

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
    if message.photo:
        draft.content_type = "photo"
        draft.media = message.photo[-1].file_id
    elif message.video:
        draft.content_type = "video"
        draft.media = message.video.file_id
    elif message.video_note:
        draft.content_type = "video_note"
        draft.media = message.video_note.file_id

    preview_text = await _generate_preview_text(draft)
    await message.answer(
        f"‚úÖ <b>–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )
    await state.clear()



@router.callback_query(F.data.startswith("set_type_"))
async def set_content_type(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]
    content_type = callback.data.replace("set_type_", "")
    draft.content_type = content_type

    # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Ç–µ–∫—Å—Ç
    if content_type == "text":
        draft.media = None

    preview_text = await _generate_preview_text(draft)
    await callback.message.edit_text(
        f"‚úÖ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )


# @router.callback_query(F.data == "preview_broadcast")
# async def preview_broadcast(callback: CallbackQuery):
#     """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏"""
#     user_id = callback.from_user.id
#     if user_id not in BroadcastService.current_editing:
#         await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#         return
#
#     draft = BroadcastService.current_editing[user_id]
#
#     try:
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∞–º–æ–º—É —Å–µ–±–µ
#         if draft.content_type == "text":
#             await callback.message.answer(draft.text, parse_mode="HTML")
#         elif draft.content_type == "photo":
#             await callback.message.answer_photo(draft.media, caption=draft.text, parse_mode="HTML")
#         elif draft.content_type == "video":
#             await callback.message.answer_video(draft.media, caption=draft.text, parse_mode="HTML")
#         elif draft.content_type == "video_note":
#             await callback.message.answer_video_note(draft.media)
#             if draft.text:
#                 await callback.message.answer(draft.text, parse_mode="HTML")
#
#         await callback.answer("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
#     except Exception as e:
#         await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
#


# bot/handlers/broadcast.py
@router.callback_query(F.data == "preview_broadcast")
async def preview_broadcast(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]

    try:
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode="HTML" –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if draft.buttons:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(**b) for b in draft.buttons]])
        else:
            kb = None

        if draft.content_type == "text":
            await callback.message.answer(draft.text, reply_markup=kb, parse_mode="HTML")
        elif draft.content_type == "photo":
            await callback.message.answer_photo(draft.media, caption=draft.text, reply_markup=kb, parse_mode="HTML")
        elif draft.content_type == "video":
            await callback.message.answer_video(draft.media, caption=draft.text, reply_markup=kb, parse_mode="HTML")
        elif draft.content_type == "video_note":
            await callback.message.answer_video_note(draft.media)
            if draft.text:
                await callback.message.answer(draft.text, reply_markup=kb, parse_mode="HTML")

        await callback.answer("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


async def _generate_preview_text(draft) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    type_icons = {
        "text": "üìù", "photo": "üì∑",
        "video": "üé•", "video_note": "üìπ"
    }

    text = (
        f"{type_icons.get(draft.content_type, 'üìù')} <b>–¢–∏–ø:</b> {draft.content_type}\n"
        f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {draft.text[:100] + '...' if len(draft.text) > 100 else draft.text}\n"
    )

    if draft.media:
        text += f"üñºÔ∏è <b>–ú–µ–¥–∏–∞:</b> ‚úÖ\n"

    text += f"üîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(draft.buttons)} —à—Ç.\n"

    return text


# bot/handlers/broadcast.py (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)

@router.callback_query(F.data == "add_button")
async def add_button_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    await callback.message.edit_text(
        "üîò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:",
        reply_markup=button_type_kb()
    )


@router.callback_query(F.data == "button_type_url")
async def add_url_button(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL-–∫–Ω–æ–ø–∫–∏"""
    await state.set_state(BroadcastStates.editing_buttons)
    await state.update_data(button_type="url")

    await callback.message.edit_text(
        "üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ URL-–∫–Ω–æ–ø–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ú–æ–π —Å–∞–π—Ç, https://example.com</code>",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "button_type_webapp")
async def add_webapp_button(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Web App –∫–Ω–æ–ø–∫–∏"""
    await state.set_state(BroadcastStates.editing_buttons)
    await state.update_data(button_type="web_app")

    await callback.message.edit_text(
        "‚ö° <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Web App –∫–Ω–æ–ø–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL Web App —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, https://example.com</code>",
        parse_mode="HTML"
    )


@router.message(BroadcastStates.editing_buttons)
async def process_button_add(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    user_id = message.from_user.id
    if user_id not in BroadcastService.current_editing:
        await message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    data = await state.get_data()
    button_type = data.get("button_type", "url")

    try:
        parts = message.text.split(',', 1)
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        text = parts[0].strip()
        url = parts[1].strip()

        draft = BroadcastService.current_editing[user_id]

        if button_type == "url":
            new_button = {"text": text, "url": url}
        else:  # web_app
            new_button = {"text": text, "web_app": {"url": url}}

        draft.buttons.append(new_button)

        await message.answer(
            f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–¢–µ–∫—Å—Ç: {text}\n"
            f"URL: {url}\n\n"
            f"–í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {len(draft.buttons)}",
            reply_markup=buttons_management_kb()
        )

    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, https://example.com</code>",
            parse_mode="HTML"
        )

    await state.clear()


@router.callback_query(F.data == "edit_buttons_list")
async def edit_buttons_list(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]

    if not draft.buttons:
        await callback.answer("–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return

    buttons_text = "\n".join([
        f"{i + 1}. {btn['text']} - {btn.get('url', btn.get('web_app', {}).get('url', 'N/A'))}"
        for i, btn in enumerate(draft.buttons)
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        *[[InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i + 1}", callback_data=f"remove_button_{i}")]
          for i in range(len(draft.buttons))],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_buttons_management")]
    ])

    await callback.message.edit_text(
        f"üîò <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫</b>\n\n{buttons_text}",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("remove_button_"))
async def remove_button(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    button_index = int(callback.data.replace("remove_button_", ""))
    draft = BroadcastService.current_editing[user_id]

    if 0 <= button_index < len(draft.buttons):
        removed_button = draft.buttons.pop(button_index)
        await callback.answer(f"–ö–Ω–æ–ø–∫–∞ '{removed_button['text']}' —É–¥–∞–ª–µ–Ω–∞!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        await edit_buttons_list(callback)
    else:
        await callback.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


@router.callback_query(F.data == "clear_buttons")
async def clear_buttons(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]
    draft.buttons.clear()

    await callback.message.edit_text(
        "‚úÖ <b>–í—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã!</b>",
        reply_markup=buttons_management_kb()
    )


@router.callback_query(F.data == "start_broadcast")
async def start_broadcast(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not draft.text and draft.content_type != "video_note":
        await callback.answer("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if draft.content_type in ["photo", "video"] and not draft.media:
        await callback.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_constructor")]
    ])

    await callback.message.edit_text(
        "üöÄ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n"
        f"–¢–∏–ø: {draft.content_type}\n"
        f"–ö–Ω–æ–ø–æ–∫: {len(draft.buttons)}",
        reply_markup=confirm_kb
    )


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    from bot.models.users import User
    async with SessionLocal() as session:
        result = await session.execute(select(User.telegram_id))
        users = [row[0] for row in result.all()]

    if not users:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    draft.status = "pending"
    draft.total = len(users)

    async with SessionLocal() as session:
        session.add(draft)
        await session.commit()
        await session.refresh(draft)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(BroadcastService.send_task(bot, draft, users))

    # –£–±–∏—Ä–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    BroadcastService.current_editing.pop(user_id, None)

    await callback.message.edit_text(
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"ID —Ä–∞—Å—Å—ã–ª–∫–∏: #{draft.id}\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_active")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="broadcast_main")]
        ])
    )


@router.callback_query(F.data == "broadcast_active")
async def broadcast_active_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from bot.models.broadcast_task import BroadcastTask
    from sqlalchemy import select

    async with SessionLocal() as session:
        result = await session.execute(
            select(BroadcastTask).where(
                BroadcastTask.status.in_(["pending", "sending"])
            ).order_by(BroadcastTask.created_at.desc())
        )
        tasks = result.scalars().all()

    if not tasks:
        await callback.message.edit_text(
            "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_main")]
            ])
        )
        return

    await callback.message.edit_text(
        f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(tasks)}",
        reply_markup=broadcast_active_kb(tasks)
    )


@router.callback_query(F.data.startswith("broadcast_info_"))
async def broadcast_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ"""
    task_id = int(callback.data.replace("broadcast_info_", ""))

    from bot.models.broadcast_task import BroadcastTask
    from sqlalchemy import select

    async with SessionLocal() as session:
        result = await session.execute(select(BroadcastTask).where(BroadcastTask.id == task_id))
        task = result.scalar_one_or_none()

    if not task:
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    status_icons = {
        "pending": "‚è≥", "sending": "üü¢",
        "stopped": "üõë", "done": "‚úÖ", "draft": "üìù"
    }

    progress = f"{task.sent}/{task.total}" if task.total > 0 else "0/0"
    percentage = (task.sent / task.total * 100) if task.total > 0 else 0

    info_text = (
        f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ #{task.id}</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icons.get(task.status, '‚ùì')} {task.status}\n"
        f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress} ({percentage:.1f}%)\n"
        f"‚ùå <b>–û—à–∏–±–∫–∏:</b> {task.failed}\n"
        f"üìù <b>–¢–∏–ø:</b> {task.content_type}\n"
        f"üïí <b>–°–æ–∑–¥–∞–Ω–∞:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîò <b>–ö–Ω–æ–ø–æ–∫:</b> {len(task.buttons)}"
    )

    await callback.message.edit_text(
        info_text,
        reply_markup=broadcast_control_kb(task.id)
    )


@router.callback_query(F.data.startswith("stop_broadcast_"))
async def stop_broadcast(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    task_id = int(callback.data.replace("stop_broadcast_", ""))

    from bot.models.broadcast_task import BroadcastTask
    from sqlalchemy import select, update

    async with SessionLocal() as session:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await BroadcastService.stop_task(task_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await session.execute(
            update(BroadcastTask)
            .where(BroadcastTask.id == task_id)
            .values(status="stopped")
        )
        await session.commit()

    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    await broadcast_info(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é


@router.callback_query(F.data == "broadcast_history")
async def broadcast_history(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from bot.models.broadcast_task import BroadcastTask
    from sqlalchemy import select

    async with SessionLocal() as session:
        result = await session.execute(
            select(BroadcastTask)
            .where(BroadcastTask.status.in_(["done", "stopped"]))
            .order_by(BroadcastTask.created_at.desc())
            .limit(10)
        )
        tasks = result.scalars().all()

    if not tasks:
        await callback.message.edit_text(
            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_main")]
            ])
        )
        return

    history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
    for task in tasks:
        status_icon = "‚úÖ" if task.status == "done" else "üõë"
        history_text += (
            f"{status_icon} #{task.id} - {task.sent}/{task.total} "
            f"({task.created_at.strftime('%d.%m.%Y')})\n"
        )

    await callback.message.edit_text(
        history_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_main")]
        ])
    )


@router.callback_query(F.data == "save_draft")
async def save_draft(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    user_id = callback.from_user.id
    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]
    draft.status = "draft"

    async with SessionLocal() as session:
        session.add(draft)
        await session.commit()
        await session.refresh(draft)

    await callback.answer(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID: #{draft.id}")


@router.callback_query(F.data == "save_editing")
async def save_editing(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    user_id = callback.from_user.id

    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]
    preview_text = await _generate_preview_text(draft)

    await callback.message.edit_text(
        f"‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "cancel_editing")
async def cancel_editing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    user_id = callback.from_user.id

    if user_id not in BroadcastService.current_editing:
        await callback.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    draft = BroadcastService.current_editing[user_id]
    preview_text = await _generate_preview_text(draft)

    await callback.message.edit_text(
        f"üé® <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n{preview_text}",
        reply_markup=broadcast_constructor_kb(draft),
        parse_mode="HTML"
    )


# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "back_constructor")
async def back_to_constructor(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
    await broadcast_constructor(callback, None)


@router.callback_query(F.data == "back_buttons_management")
async def back_to_buttons_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∞–º–∏"""
    await callback.message.edit_text(
        "üîò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏</b>",
        reply_markup=buttons_management_kb()
    )


@router.callback_query(F.data == "stop_all_broadcasts")
async def stop_all_broadcasts(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from bot.models.broadcast_task import BroadcastTask
    from sqlalchemy import select, update

    async with SessionLocal() as session:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        result = await session.execute(
            select(BroadcastTask).where(BroadcastTask.status.in_(["pending", "sending"]))
        )
        tasks = result.scalars().all()

        for task in tasks:
            await BroadcastService.stop_task(task.id)
            await session.execute(
                update(BroadcastTask)
                .where(BroadcastTask.id == task.id)
                .values(status="stopped")
            )

        await session.commit()

    await callback.answer(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(tasks)} —Ä–∞—Å—Å—ã–ª–æ–∫!")
    await broadcast_active_list(callback)


@router.message(F.photo | F.video | F.video_note)
async def handle_media_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    current_state = await state.get_state()
    if current_state != BroadcastStates.editing_media.state:
        return

    user_id = message.from_user.id
    if user_id not in BroadcastService.current_editing:
        return

    await process_media_edit(message, state)