from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import settings
from bot.services.promo import PromoService
from bot.middlewares.db import DataBaseSessionMiddleware

router = Router()
router.message.middleware(DataBaseSessionMiddleware())


@router.message(F.text.startswith("/add_promo"))
async def add_promo(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    try:
        # –≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
        title = message.text.split(maxsplit=1)[1].strip()
    except IndexError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/add_promo &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code>")
        return

    promo = await PromoService.create_promo(session, title, message.from_user.id)

    promo_url = f"{settings.bot_href}?start={promo.code}"

    text = (
        "üéâ <b>–ü—Ä–æ–º–æ-—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{promo_url}</code>\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {promo.title}\n"
        f"üîë <b>–ö–æ–¥:</b> <code>{promo.code}</code>\n"
        f"üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code>{promo.created_by}</code>"
    )

    await message.answer(text, disable_web_page_preview=True)


@router.message(F.text == "/promos")
async def list_promos(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return
    promos = await PromoService.get_promos(session)
    if not promos:
        await message.answer("üì≠ –ü—Ä–æ–º–æ-—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ-—Å—Å—ã–ª–∫–∞–º</b>\n\n"
    for promo in promos:
        text += (
            f"‚ñ´Ô∏è <b>{promo['title']}</b>\n"
            f"   üîë –ö–æ–¥: <code>{promo['code']}</code>\n"
            
            f"   üë• –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {promo['referrals_count']}\n"
            f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {promo['active_users']}\n\n"
        )
    await message.answer(text)


@router.message(F.text.startswith("/delete_promo"))
async def delete_promo(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return
    try:
        _, promo_id = message.text.split(maxsplit=1)
        promo_id = int(promo_id)
    except ValueError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delete_promo <id>")
        return

    deleted = await PromoService.delete_promo(session, promo_id)
    if deleted:
        await message.answer(f"üóë –ü—Ä–æ–º–æ <code>{promo_id}</code> —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("‚ö† –ü—Ä–æ–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
