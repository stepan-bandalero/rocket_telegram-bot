from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import settings
from bot.services.promo import PromoService
from bot.middlewares.db import DataBaseSessionMiddleware

router = Router()
router.message.middleware(DataBaseSessionMiddleware())

#
# @router.message(F.text.startswith("/add_promo"))
# async def add_promo(message: Message, session: AsyncSession):
#     if message.from_user.id not in settings.admins:
#         return
#
#     try:
#         _, tg_id_str = message.text.split(maxsplit=1)
#         tg_id = int(tg_id_str.strip())
#     except (ValueError, IndexError):
#         await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/add_promo &lt;telegram_id&gt;</code>")
#         return
#
#     promo = await PromoService.create_promo(session, tg_id)
#
#     promo_url = f"{settings.bot_href}?start={promo.code}"
#
#     text = (
#         "üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
#         f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{promo_url}</code>\n"
#         f"üë§ <b>–ê–¥–º–∏–Ω:</b> <code>{promo.created_by}</code>"
#     )
#
#     await message.answer(text, disable_web_page_preview=True)


@router.message(F.text.startswith("/add_promo"))
async def add_promo(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    try:
        _, tg_id_str, percent_str = message.text.split(maxsplit=2)
        tg_id = int(tg_id_str.strip())
        percent = int(percent_str.strip())

        if not (0 < percent <= 100):
            raise ValueError("invalid percent")

    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/add_promo &lt;telegram_id&gt; &lt;–ø—Ä–æ—Ü–µ–Ω—Ç&gt;</code>")
        return

    promo = await PromoService.create_promo(session, tg_id, percent)

    promo_url = f"{settings.bot_href}?start={promo.code}"

    text = (
        "üéâ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{promo_url}</code>\n"
        f"üë§ <b>–ê–¥–º–∏–Ω:</b> <code>{promo.created_by}</code>\n"
        f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> <code>{promo.referral_percentage}%</code>"
    )

    await message.answer(text, disable_web_page_preview=True)



@router.message(F.text == "/promos")
async def list_promos(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return

    promos = await PromoService.get_promos(session)
    if not promos:
        await message.answer("üì≠ –ü—Ä–æ–º–æ-—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    parts: list[str] = []
    header = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ-—Å—Å—ã–ª–∫–∞–º</b>\n\n"
    current = header

    for promo in promos:
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        referrals = f"{promo['referrals_count']:,}".replace(",", " ")
        active = f"{promo['active_users']:,}".replace(",", " ")
        deposits = f"{promo['total_deposits_cents'] / 100:,.2f}".replace(",", " ")
        withdrawals = f"{promo['total_withdrawals_cents'] / 100:,.2f}".replace(",", " ")

        block = (
            f"‚ñ´Ô∏è <b>–ê–¥–º–∏–Ω:</b> <code>{promo['created_by']}</code>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{settings.bot_href}?start={promo['code']}</code>\n"
            f"   üîë –ö–æ–¥: <code>{promo['code']}</code>\n"
            f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç: <b>{promo['referral_percentage']}%</b>\n"
            f"   üë• –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {referrals}\n"
            f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
            f"   üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>{deposits} TON</b>\n"
            f"   üí∏ –í—ã–≤–æ–¥–æ–≤: <b>{withdrawals} TON</b>\n\n"
        )

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(current) + len(block) > 4000:
            parts.append(current)
            current = block
        else:
            current += block

    if current:
        parts.append(current)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
    for part in parts:
        await message.answer(part, disable_web_page_preview=True)



@router.message(F.text.startswith("/delete_promo"))
async def delete_promo(message: Message, session: AsyncSession):
    if message.from_user.id not in settings.admins:
        return
    try:
        _, promo_code = message.text.split(maxsplit=1)
        promo_code = promo_code.strip()
    except ValueError:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã HTML –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/delete_promo &lt;–∫–æ–¥&gt;</code>", parse_mode="HTML")
        return

    deleted = await PromoService.delete_promo(session, promo_code)
    if deleted:
        await message.answer(
            f"üóë –ü—Ä–æ–º–æ —Å –∫–æ–¥–æ–º <code>{promo_code}</code> —É–¥–∞–ª–µ–Ω.", parse_mode="HTML"
        )
    else:
        await message.answer("‚ö† –ü—Ä–æ–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
