from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from sqlalchemy import func
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import settings
from bot.db import SessionLocal
from bot.models.users import User

router = Router()

PAGE_SIZE = 8  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–µ–Ω—å—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞)


async def get_users_page(session: AsyncSession, page: int):
    offset = (page - 1) * PAGE_SIZE
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–Ω–∞—á–∞–ª–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±—ã–≤–∞–Ω–∏–µ), –ø–æ—Ç–æ–º –ø–æ telegram_id
    stmt = select(User).order_by(User.ton_balance.desc(), User.telegram_id).offset(offset).limit(PAGE_SIZE)
    result = await session.execute(stmt)
    users = result.scalars().all()

    total_stmt = select(func.count(User.telegram_id))
    total_result = await session.execute(total_stmt)
    total_count = total_result.scalar_one()

    return users, total_count


def build_users_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –Ω–µ–π
    if current_page > 2:
        buttons.append(InlineKeyboardButton(text="‚è™ 1", callback_data=f"user_page:1"))

    if current_page > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_page:{current_page - 1}"))

    # –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page"))

    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"user_page:{current_page + 1}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –Ω–µ–π
    if current_page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text=f"{total_pages} ‚è©", callback_data=f"user_page:{total_pages}"))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    keyboard = []

    if not buttons:
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if len(buttons) <= 3:
        # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.append(buttons)
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        if len(buttons) == 4:
            # –î–≤–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
            keyboard.append(buttons[:2])  # –ü–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
            keyboard.append(buttons[2:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
        else:  # 5 –∫–Ω–æ–ø–æ–∫
            keyboard.append(buttons[:2])  # ‚è™ –∏ ‚óÄÔ∏è
            keyboard.append([buttons[2]])  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ü–µ–Ω—Ç—Ä)
            keyboard.append(buttons[3:])  # ‚ñ∂Ô∏è –∏ ‚è©

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def format_user_line(index: int, user: User) -> str:
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3 –ø–æ–∑–∏—Ü–∏–π
    rank_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    rank_icon = rank_emoji.get(index, f"#{index:02d}")

    username = f"@{user.username}" if user.username else "‚Äî"
    first_name = user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balance_val = user.ton_balance if user.ton_balance is not None else 0
    balance = f"{balance_val / 100:.2f} TON"

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
    if index <= 3:
        user_header = f"{rank_icon} <b>üèÜ –¢–û–ü-{index}</b>"
    else:
        user_header = f"{rank_icon} <b>{first_name}</b>"

    return (
        f"{user_header}\n"
        f"‚î£ üë§ {username}\n"
        f"‚î£ üÜî <code>{user.telegram_id}</code>\n"
        f"‚î£ üí∞ {balance}\n"
        f"‚îó üìä –†–µ—Ñ: <code>{user.referred_by or '‚Äî'}</code>\n"
        f"‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ"
    )


def format_users_message(users: list, page: int, total_pages: int, total_count: int) -> str:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    header = (
        f"üìä <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page}/{total_pages}</b>\n"
        f"üë• –í—Å–µ–≥–æ: <b>{total_count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_lines = [
        format_user_line(i + 1 + (page - 1) * PAGE_SIZE, user)
        for i, user in enumerate(users)
    ]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
    if not user_lines:
        return header + "üì≠ <i>–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"

    return header + "\n".join(user_lines)


@router.message(F.text.startswith("/users"))
async def list_users(message: Message):
    if message.from_user.id not in settings.admins:
        return
    page = 1
    async with SessionLocal() as session:
        users, total_count = await get_users_page(session, page)

    total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)

    text = format_users_message(users, page, total_pages, total_count)
    kb = build_users_keyboard(page, total_pages)

    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data.startswith("user_page:"))
async def paginate_users(cb: CallbackQuery):
    try:
        page = int(cb.data.split(":")[1])
        async with SessionLocal() as session:
            users, total_count = await get_users_page(session, page)

        total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if page < 1 or page > total_pages:
            await cb.answer("‚ùå –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        text = format_users_message(users, page, total_pages, total_count)
        kb = build_users_keyboard(page, total_pages)

        await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await cb.answer()

    except ValueError:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏!")
    except Exception as e:
        await cb.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


@router.callback_query(F.data == "current_page")
async def handle_current_page(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await cb.answer(f"üìÑ –í—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")