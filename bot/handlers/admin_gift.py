import re

from aiogram import Router, F
from aiogram.types import Message
from datetime import datetime, timezone
from sqlalchemy import select

from bot.config import settings
from bot.db import SessionLocal
from bot.models.gift_catalog import GiftCatalog
from bot.models.users import User
from bot.models.user_gift import UserGift, GiftStatus
from bot.models.user_transaction import UserTransaction  # –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

router = Router()


def slugify(slug_part: str) -> str:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç DurovsCap –∏–∑ —Å—Å—ã–ª–∫–∏ ‚Üí durovs—Åap –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ tg_gift_slug.
    –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –ª—é–±—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
    """
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r"[^a-zA-Z0-9]", "", slug_part)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    return cleaned.lower()


@router.message(F.text.startswith("/add_gift"))
async def add_gift_to_user(message: Message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in settings.admins:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_gift &lt;ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&qt; &lt;–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫&qt;")
        return

    try:
        telegram_id = int(parts[1])
        gift_link = parts[2]
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    if not gift_link.startswith(("http://t.me/nft/", "https://t.me/nft/", "t.me/nft/")):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫")
        return

    # –∏–∑–≤–ª–µ–∫–∞–µ–º slug –ø–æ–¥–∞—Ä–∫–∞
    slug_part = gift_link.split("/")[-1].split("-")[0]
    tg_gift_slug = slugify(slug_part)

    async with SessionLocal() as session:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await session.get(User, telegram_id)
        if not user:
            # —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            user = User(telegram_id=telegram_id, created_at=datetime.now(timezone.utc))
            session.add(user)
            await session.commit()

        # –∏—â–µ–º –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        stmt = select(GiftCatalog).where(GiftCatalog.tg_gift_slug == tg_gift_slug, GiftCatalog.is_active == True)
        result = await session.execute(stmt)
        gift = result.scalars().first()
        if not gift:
            await message.answer(f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ —Å tg_gift_slug '{tg_gift_slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_gift = UserGift(
            user_id=telegram_id,
            gift_catalog_id=gift.id,
            price_cents=gift.price_cents,
            status=GiftStatus.AVAILABLE,
            gift_image_url=f"/gifts/{tg_gift_slug}.png",
            received_at=datetime.now(timezone.utc)
        )
        session.add(user_gift)
        await session.commit()  # üîπ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–¥–∞—Ä–∫–∞

        # —Å–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ user_transactions
        transaction = UserTransaction(
            user_id=telegram_id,
            type="deposit",
            currency="gift",
            amount=gift.price_cents,
            created_at=datetime.now(timezone.utc)
        )
        session.add(transaction)
        await session.commit()

    await message.answer(
        f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ <b>{gift.title}</b> –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{telegram_id}</code>",
        parse_mode="HTML"
    )
