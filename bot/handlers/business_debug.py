from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import BusinessConnection
from aiogram.methods import GetBusinessAccountGifts, GetAvailableGifts, GetBusinessConnection
import json
import logging

logger = logging.getLogger(__name__)

router = Router(name="business_debug")


# –õ–æ–≤–∏–º –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
@router.business_message()
async def handle_business_message(message: types.Message):
    logger.info("üíº BusinessMessage raw: %s", message.json(indent=2, ensure_ascii=False))
    await message.answer("‚úÖ BusinessMessage –ø–æ–ª—É—á–µ–Ω. –õ–æ–≥ —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.")


# –õ–æ–≤–∏–º –∞–ø–¥–µ–π—Ç—ã business_connection (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏)
@router.business_connection()
async def handle_business_connection(bc: BusinessConnection):
    logger.info("üîó BusinessConnection event:\n%s", bc.model_dump_json(indent=2, ensure_ascii=False))


# –ö–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ business_connection_id
@router.message(Command("my_business_conn"))
async def cmd_my_business_conn(message: types.Message):
    if message.business_connection_id:
        await message.answer(f"üìé business_connection_id: <code>{message.business_connection_id}</code>")
    else:
        await message.answer("‚ùå –ù–µ—Ç business_connection_id –≤ —ç—Ç–æ–º –∞–ø–¥–µ–π—Ç–µ")


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ business_connection (–µ—Å–ª–∏ id –∑–Ω–∞–µ–º)
@router.message(Command("debug_business_conn"))
async def cmd_debug_business_conn(message: types.Message, bot: Bot):
    if not message.business_connection_id:
        await message.answer("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç business_connection_id")
        return
    try:
        resp = await bot(GetBusinessConnection(business_connection_id=message.business_connection_id))
        logger.info("üìë GetBusinessConnection response:\n%s", resp.model_dump_json(indent=2, ensure_ascii=False))
        await message.answer("‚úÖ GetBusinessConnection –ø–æ–ª—É—á–µ–Ω. –°–º–æ—Ç—Ä–∏ –ª–æ–≥.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ GetBusinessConnection: {e}")


# –ö–æ–º–∞–Ω–¥–∞: –≤—ã—Ç–∞—â–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(Command("debug_business_gifts"))
async def cmd_debug_business_gifts(message: types.Message, bot: Bot):
    if not message.business_connection_id:
        await message.answer("‚ùå –ù–µ—Ç business_connection_id")
        return
    try:
        resp = await bot(GetBusinessAccountGifts(
            business_connection_id=message.business_connection_id,
            limit=100,
            offset=str(0)
        ))
        logger.info("üéÅ GetBusinessAccountGifts response:\n%s", resp.model_dump_json(indent=2, ensure_ascii=False))
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(resp.gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–ª–Ω—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ GetBusinessAccountGifts: {e}")


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ (—á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
@router.message(Command("debug_available_gifts"))
async def cmd_debug_available_gifts(message: types.Message, bot: Bot):
    try:
        resp = await bot(GetAvailableGifts())
        logger.info("üéÅ GetAvailableGifts response:\n%s", resp.model_dump_json(indent=2, ensure_ascii=False))
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(resp.gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ GetAvailableGifts: {e}")
