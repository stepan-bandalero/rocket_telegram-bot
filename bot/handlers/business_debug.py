from __future__ import annotations

import json
import logging
import redis.asyncio as aioredis
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import BusinessConnection
from aiogram.methods import GetBusinessAccountGifts, GetAvailableGifts, GetBusinessConnection

logger = logging.getLogger(__name__)

router = Router(name="business_debug")

# –ù–∞—Å—Ç—Ä–æ–∏–º Redis –∫–ª–∏–µ–Ω—Ç (rocket-top.app:6379)
redis = aioredis.Redis(host="rocket-app.top", port=6379, decode_responses=True)


async def get_conn_id_from_message_or_redis(message: types.Message) -> str | None:
    """–ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å business_connection_id –∏–∑ –∞–ø–¥–µ–π—Ç–∞ –∏–ª–∏ Redis"""
    if message.business_connection_id:
        return message.business_connection_id
    conn_id = await redis.get("business_connection_id")
    if conn_id:
        logger.info("üì¶ business_connection_id –≤–∑—è—Ç –∏–∑ Redis: %s", conn_id)
    return conn_id


# –õ–æ–≤–∏–º –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
@router.business_message()
async def handle_business_message(message: types.Message):
    logger.info("üíº BusinessMessage raw:\n%s", json.dumps(message.model_dump(), indent=2, ensure_ascii=False))
    # –°–æ—Ö—Ä–∞–Ω–∏–º business_connection_id –≤ Redis
    if message.business_connection_id:
        await redis.set("business_connection_id", message.business_connection_id)
        logger.info("üíæ business_connection_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis: %s", message.business_connection_id)


# –õ–æ–≤–∏–º –∞–ø–¥–µ–π—Ç—ã business_connection (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏)
@router.business_connection()
async def handle_business_connection(bc: BusinessConnection):
    logger.info("üîó BusinessConnection event:\n%s", json.dumps(bc.model_dump(), indent=2, ensure_ascii=False))
    await redis.set("business_connection_id", bc.id)
    logger.info("üíæ business_connection_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis: %s", bc.id)


# –ö–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ business_connection_id
@router.message(Command("my_business_conn"))
async def cmd_my_business_conn(message: types.Message):
    conn_id = await get_conn_id_from_message_or_redis(message)
    if conn_id:
        print(f"üìé business_connection_id: {conn_id}")
    else:
        print("‚ùå business_connection_id –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏ –≤ –∞–ø–¥–µ–π—Ç–µ, –Ω–∏ –≤ Redis)")


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ business_connection
@router.message(Command("debug_business_conn"))
async def cmd_debug_business_conn(message: types.Message, bot: Bot):
    conn_id = await get_conn_id_from_message_or_redis(message)
    if not conn_id:

        return
    try:
        resp = await bot(GetBusinessConnection(business_connection_id=conn_id))
        logger.info("üìë GetBusinessConnection response:\n%s", json.dumps(resp.model_dump(), indent=2, ensure_ascii=False))
    except Exception as e:
        return

# –ö–æ–º–∞–Ω–¥–∞: –≤—ã—Ç–∞—â–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
@router.message(Command("debug_business_gifts"))
async def cmd_debug_business_gifts(message: types.Message, bot: Bot):
    conn_id = await get_conn_id_from_message_or_redis(message)
    if not conn_id:
        return
    try:
        resp = await bot(GetBusinessAccountGifts(
            business_connection_id=conn_id,
            limit=100,
            offset="0"
        ))
        logger.info("üéÅ GetBusinessAccountGifts response:\n%s", json.dumps(resp.model_dump(), indent=2, ensure_ascii=False))
    except Exception as e:
        return


# –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
@router.message(Command("debug_available_gifts"))
async def cmd_debug_available_gifts(message: types.Message, bot: Bot):
    try:
        resp = await bot(GetAvailableGifts())
        logger.info("üéÅ GetAvailableGifts response:\n%s", json.dumps(resp.model_dump(), indent=2, ensure_ascii=False))
    except Exception as e:
        return
