from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from bot.config import settings
from bot.db import SessionLocal
from bot.models.users import User
from bot.models.user_gift import UserGift, GiftStatus
from bot.models.gift_withdrawals import GiftWithdrawal
from bot.models.bets import Bet
from datetime import datetime

router = Router()

PAGE_SIZE = 1  # 1 –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


async def get_withdrawals_page(session: AsyncSession, page: int):
    offset = (page - 1) * PAGE_SIZE

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending –∏–ª–∏ processing
    stmt = (
        select(GiftWithdrawal)
        .join(UserGift, GiftWithdrawal.user_gift_id == UserGift.id)
        .join(User, UserGift.user_id == User.telegram_id)
        .options(
            selectinload(GiftWithdrawal.user_gift_id).selectinload(UserGift.user),
            selectinload(GiftWithdrawal.user_gift_id).selectinload(UserGift.gift_catalog_id)
        )
        .where(GiftWithdrawal.status.in_(["pending", "processing"]))
        .order_by(GiftWithdrawal.created_at.desc())
        .offset(offset)
        .limit(PAGE_SIZE)
    )
    result = await session.execute(stmt)
    withdrawals = result.scalars().all()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending –∏–ª–∏ processing
    total_stmt = (
        select(func.count(GiftWithdrawal.id))
        .where(GiftWithdrawal.status.in_(["pending", "processing"]))
    )
    total_result = await session.execute(total_stmt)
    total_count = total_result.scalar_one()

    return withdrawals, total_count


async def get_user_recent_bets(session: AsyncSession, user_id: int, limit: int = 5):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stmt = (
        select(Bet)
        .where(Bet.user_id == user_id)
        .order_by(Bet.created_at.desc())
        .limit(limit)
    )
    result = await session.execute(stmt)
    return result.scalars().all()


def build_withdrawals_keyboard(current_page: int, total_pages: int, withdrawal_id: int) -> InlineKeyboardMarkup:
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if current_page > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"withdraw_page:{current_page - 1}"))

    # –ö–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_withdraw_page"))

    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"withdraw_page:{current_page + 1}"))

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_withdraw:{withdrawal_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw:{withdrawal_id}")
    ]

    keyboard = []
    if buttons:
        keyboard.append(buttons)
    keyboard.append(action_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def format_bet_line(bet: Bet, index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–≤–∫–µ"""
    amount = f"{bet.amount_cents / 100:.2f}" if bet.amount_cents else "0.00"
    win = f"{bet.win_cents / 100:.2f}" if bet.win_cents else "0.00"
    multiplier = f"{bet.cashout_multiplier_bp / 100:.2f}x" if bet.cashout_multiplier_bp else "‚Äî"
    status = "‚úÖ –í—ã–≤–µ–¥–µ–Ω–∞" if bet.cashed_out else "‚ùå –ù–µ –≤—ã–≤–µ–¥–µ–Ω–∞"
    asset = "üí∞ FIAT" if bet.asset_type == "FIAT" else "üíé GIFT"

    return (
        f"‚î£ #{index} | {asset}\n"
        f"‚î£ üí∞ –°—Ç–∞–≤–∫–∞: ${amount}\n"
        f"‚î£ üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}\n"
        f"‚î£ üèÜ –í—ã–∏–≥—Ä—ã—à: ${win}\n"
        f"‚îó üìä –°—Ç–∞—Ç—É—Å: {status}\n"
    )


def format_withdrawal_message(withdrawal: GiftWithdrawal, recent_bets: list, page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ"""
    user_gift = withdrawal.user_gift
    user = user_gift.user
    gift_catalog = user_gift.gift_catalog

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
    gift_title = gift_catalog.title if gift_catalog else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
    gift_price = f"{user_gift.price_cents / 100:.2f}" if user_gift.price_cents else "0.00"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = f"@<code>{user.username}</code>" if user.username else "‚Äî"
    user_balance = f"{user.ton_balance / 100:.2f} TON" if user.ton_balance else "0.00 TON"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    created_at = withdrawal.created_at.strftime("%d.%m.%Y %H:%M") if withdrawal.created_at else "‚Äî"

    message_parts = [
        f"üì¶ <b>–ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î –ü–û–î–ê–†–ö–ê</b>\n",
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page}/{total_pages}</b>\n",
        f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: <b>{created_at}</b>\n",

        f"üéÅ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ê–†–ö–ï</b>\n",
        f"‚î£ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{gift_title}</b>\n",
        f"‚î£ –¶–µ–Ω–∞: <b>${gift_price}</b>\n",
    ]


    message_parts.extend([
        f"\nüë§ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï</b>\n",
        f"‚î£ ID: <code>{user.telegram_id}</code>\n",
        f"‚î£ –ò–º—è: <b>{user.first_name or '‚Äî'}</b>\n",
        f"‚î£ Username: {username}\n",
        f"‚îó –ë–∞–ª–∞–Ω—Å: <b>{user_balance}</b>\n",
    ])

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if recent_bets:
        message_parts.append(f"\nüé∞ <b>–ü–û–°–õ–ï–î–ù–ò–ï –°–¢–ê–í–ö–ò ({len(recent_bets)})</b>\n")
        for i, bet in enumerate(recent_bets, 1):
            message_parts.append(format_bet_line(bet, i))
    else:
        message_parts.append(f"\nüé∞ <b>–ü–û–°–õ–ï–î–ù–ò–ï –°–¢–ê–í–ö–ò</b>\n‚îó <i>–°—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>\n")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    if withdrawal.error_text:
        message_parts.append(f"\n‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê:</b> <code>{withdrawal.error_text}</code>")

    return "".join(message_parts)


@router.message(F.text.startswith("/withdrawals"))
async def list_withdrawals(message: Message):
    if message.from_user.id not in settings.admins:
        return

    page = 1
    async with SessionLocal() as session:
        withdrawals, total_count = await get_withdrawals_page(session, page)

    total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)

    if not withdrawals:
        await message.answer("üì≠ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending/processing</b>", parse_mode="HTML")
        return

    withdrawal = withdrawals[0]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        recent_bets = await get_user_recent_bets(session, withdrawal.user_gift.user_id)

    text = format_withdrawal_message(withdrawal, recent_bets, page, total_pages)
    kb = build_withdrawals_keyboard(page, total_pages, withdrawal.id)

    await message.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=False)


@router.callback_query(F.data.startswith("withdraw_page:"))
async def paginate_withdrawals(cb: CallbackQuery):
    try:
        page = int(cb.data.split(":")[1])

        async with SessionLocal() as session:
            withdrawals, total_count = await get_withdrawals_page(session, page)

        total_pages = max((total_count + PAGE_SIZE - 1) // PAGE_SIZE, 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if page < 1 or page > total_pages or not withdrawals:
            await cb.answer("‚ùå –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        withdrawal = withdrawals[0]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with SessionLocal() as session:
            recent_bets = await get_user_recent_bets(session, withdrawal.user_gift.user_id)

        text = format_withdrawal_message(withdrawal, recent_bets, page, total_pages)
        kb = build_withdrawals_keyboard(page, total_pages, withdrawal.id)

        await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML", disable_web_page_preview=False)
        await cb.answer()

    except ValueError:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏!")
    except Exception as e:
        await cb.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


@router.callback_query(F.data == "current_withdraw_page")
async def handle_current_page(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await cb.answer(f"üìÑ –í—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")


@router.callback_query(F.data.startswith("confirm_withdraw:"))
async def confirm_withdrawal(cb: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_id = int(cb.data.split(":")[1])

        async with SessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
            stmt = (
                select(GiftWithdrawal)
                .where(GiftWithdrawal.id == withdrawal_id)
                .where(GiftWithdrawal.status.in_(["pending", "processing"]))
                .options(selectinload(GiftWithdrawal.user_gift))
            )
            result = await session.execute(stmt)
            withdrawal = result.scalar_one_or_none()

            if not withdrawal:
                await cb.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ done
            withdrawal.status = "done"
            withdrawal.withdrawn_at = func.now()

            await session.commit()

            await cb.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_text = cb.message.text
            updated_text = current_text + f"\n\n‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û –ê–î–ú–ò–ù–û–ú</b>\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = cb.message.reply_markup.inline_keyboard
            new_keyboard = [row for row in keyboard if not any(
                btn.callback_data.startswith(('confirm_withdraw:', 'reject_withdraw:')) for btn in row)]

            await cb.message.edit_text(
                updated_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard),
                parse_mode="HTML",
                disable_web_page_preview=False
            )

    except Exception as e:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")


@router.callback_query(F.data.startswith("reject_withdraw:"))
async def reject_withdrawal(cb: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        withdrawal_id = int(cb.data.split(":")[1])

        async with SessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
            stmt = (
                select(GiftWithdrawal)
                .where(GiftWithdrawal.id == withdrawal_id)
                .where(GiftWithdrawal.status.in_(["pending", "processing"]))
                .options(selectinload(GiftWithdrawal.user_gift))
            )
            result = await session.execute(stmt)
            withdrawal = result.scalar_one_or_none()

            if not withdrawal:
                await cb.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ failed (—Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –º–µ–Ω—è–µ–º)
            withdrawal.status = "failed"

            await session.commit()

            await cb.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_text = cb.message.text
            updated_text = current_text + f"\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û –ê–î–ú–ò–ù–û–ú</b>\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = cb.message.reply_markup.inline_keyboard
            new_keyboard = [row for row in keyboard if not any(
                btn.callback_data.startswith(('confirm_withdraw:', 'reject_withdraw:')) for btn in row)]

            await cb.message.edit_text(
                updated_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard),
                parse_mode="HTML",
                disable_web_page_preview=False
            )

    except Exception as e:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")